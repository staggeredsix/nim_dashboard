import { useState, useEffect, useCallback } from 'react';

interface Metrics {
  system: {
    cpu_usage: number;
    memory_used: number;
    memory_total: number;
    gpus: {
      [key: string]: {
        utilization: number;
        memory_used: number;
        memory_total: number;
        temperature: number;
      };
    };
  };
  benchmark: {
    tokens_per_second: number;
    requests_per_second: number;
    latency: number;
    time_to_first_token: number;
  };
}

export const useWebSocket = (url: string) => {
  const [socket, setSocket] = useState<WebSocket | null>(null);
  const [metrics, setMetrics] = useState<Metrics | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const ws = new WebSocket(url);

    ws.onopen = () => {
      setIsConnected(true);
      setError(null);
      // Request initial metrics
      ws.send(JSON.stringify({ type: 'get_metrics' }));
    };

    ws.onclose = () => {
      setIsConnected(false);
      // Try to reconnect after 2 seconds
      setTimeout(() => {
        setSocket(new WebSocket(url));
      }, 2000);
    };

    ws.onerror = (event) => {
      setError('WebSocket error occurred');
      console.error('WebSocket error:', event);
    };

    ws.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        if (data.type === 'metrics_update') {
          setMetrics(data.data);
        }
      } catch (err) {
        console.error('Error parsing WebSocket message:', err);
      }
    };

    setSocket(ws);

    // Cleanup on unmount
    return () => {
      if (ws.readyState === WebSocket.OPEN) {
        ws.close();
      }
    };
  }, [url]);

  const sendMessage = useCallback((message: any) => {
    if (socket?.readyState === WebSocket.OPEN) {
      socket.send(JSON.stringify(message));
    }
  }, [socket]);

  const requestMetrics = useCallback(() => {
    sendMessage({ type: 'get_metrics' });
  }, [sendMessage]);

  return {
    metrics,
    isConnected,
    error,
    sendMessage,
    requestMetrics
  };
};

export default useWebSocket;